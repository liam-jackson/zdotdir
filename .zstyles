#!/usr/bin/env zsh
#
# .zstyles - Set zstyle settings for plugins that need them.
# https://zsh.sourceforge.io/Doc/Release/Completion-System.html#:~:text=The%20context%20string,is%20given%20below.
# The context string always consists of a fixed set of fields, separated by colons and with a leading colon before the first. Fields which are not yet known are left empty, but the surrounding colons appear anyway. The fields are always in the order :completion:function:completer:command:argument:tag. These have the following meaning:
#
# The literal string completion, saying that this style is used by the completion system. This distinguishes the context from those used by, for example, zle widgets and ZFTP functions.
# The function, if completion is called from a named widget rather than through the normal completion system. Typically this is blank, but it is set by special widgets such as predict-on and the various functions in the Widget directory of the distribution to the name of that function, often in an abbreviated form.
# The completer currently active, the name of the function without the leading underscore and with other underscores converted to hyphens. A ‘completer’ is in overall control of how completion is to be performed; ‘complete’ is the simplest, but other completers exist to perform related tasks such as correction, or to modify the behaviour of a later completer. See Control Functions for more information.
# The command or a special -context-, just at it appears following the #compdef tag or the compdef function. Completion functions for commands that have sub-commands usually modify this field to contain the name of the command followed by a minus sign and the sub-command. For example, the completion function for the cvs command sets this field to cvs-add when completing arguments to the add subcommand.
# The argument; this indicates which command line or option argument we are completing. For command arguments this generally takes the form argument-n, where n is the number of the argument, and for arguments to options the form option-opt-n where n is the number of the argument to option opt. However, this is only the case if the command line is parsed with standard UNIX-style options and arguments, so many completions do not set this.
# The tag. As described previously, tags are used to discriminate between the types of matches a completion function can generate in a certain context. Any completion function may use any tag name it likes, but a list of the more common ones is given below.
#

#
# Antidote
#
zstyle ':antidote:bundle' file ${ZDOTDIR:-~}/.zsh_plugins.txt
zstyle ':antidote:bundle' use-friendly-names 'yes'

#
# Aloxaf/fzf-tab
#
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

# set descriptions format to enable group support
# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'

# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# make completions case insensitive
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# force zsh not to show completion menu, which allows fzf-tab to capture the 
# unambiguous prefix
zstyle ':completion:*' menu no
# zstyle ':completion:*' use-cache on

zstyle ':fzf-tab:*' group-colors $FZF_TAB_GROUP_COLORS

# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --all --color=always $realpath'
zstyle ':fzf-tab:complete:z:*' fzf-preview 'eza -1 --all --color=always $realpath'

zstyle ':fzf-tab:complete:-command-:*' fzf-preview \
  '(out=$(tldr --color always "$word") 2>/dev/null && echo $out) || (out=$(MANWIDTH=$FZF_PREVIEW_COLUMNS man "$word") 2>/dev/null && echo $out) || (out=$(which "$word") && echo $out) || echo "${(P)word}"'

# custom fzf flags
# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 # --bind=tab:accept
# To make fzf-tab follow FZF_DEFAULT_OPTS.
# NOTE: This may lead to unexpected behavior since some flags break this plugin. See 
# Aloxaf/fzf-tab#455.
# zstyle ':fzf-tab:*' use-fzf-default-opts yes
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'

# If you're using tmux >= 3.2, we provide a script ftb-tmux-popup to make full use of 
# it's "popup" feature
if [[ -n $TMUX ]]; then
  zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
fi

# Conda completion
zstyle ':completion::complete:*' use-cache 1
zstyle ":conda_zsh_completion:*" use-groups true
#
